{{- if .Values.testFramework.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ template "lethe-stack.fullname" . }}-test
  namespace: {{ .Release.Namespace }}
  labels:
    helm.sh/chart: {{ include "lethe-stack.chart" . }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  containers:
  - name: test
    image: {{ .Values.testFramework.image.repository }}:{{ .Values.testFramework.image.tag }}
    imagePullPolicy: {{ .Values.testFramework.image.pullPolicy }}
    command:
    - sh
    - -c
    - |
      SECONDS=0
      LETHE_NAME={{ template "lethe.fullname" . }}
      LETHE_PORT={{ .Values.lethe.service.servicePort }}
      LETHE_NAMESPACE={{ .Release.Namespace }}
      TEST_TIMEOUT={{ .Values.testFramework.timeout }}

      LETHE_URI="http://${LETHE_NAME}:${LETHE_PORT}"
      QUERY="pod{namespace=\"${LETHE_NAMESPACE}\",pod=\"${LETHE_NAME}\"}"
      END=$(date +%s)
      START=$((END - 300))

      echo "=== Test Variables ==="
      echo "LETHE_URI:      ${LETHE_URI}"
      echo "QUERY:          ${QUERY}"
      echo "START:          ${START}"
      echo "END:            ${END}"
      echo "TEST_TIMEOUT:   ${TEST_TIMEOUT}"
      echo "========================"

      while [ "$SECONDS" -lt "$TEST_TIMEOUT" ]; do
        echo "Attempt (elapsed ${SECONDS}s)..."
        RESPONSE=$(curl -sG --fail "${LETHE_URI}/api/v1/query_range" \
          --data-urlencode "start=${START}" \
          --data-urlencode "end=${END}" \
          --data-urlencode "query=${QUERY}")

        echo "--- curl response (truncated) ---"
        echo "$RESPONSE" | head -c 1000; echo
        echo "---------------------"

        if [ -n "$RESPONSE" ] && echo "$RESPONSE" | grep -qF '"result":' && ! echo "$RESPONSE" | grep -qF '"result":[]'; then
          echo "✅ Log line found"
          exit 0
        fi

        echo "Log line not found. Sleeping 3s..."
        sleep 3
      done

      echo "❌ Expected log line not found within ${TEST_TIMEOUT}s"
      exit 1
  restartPolicy: Never
{{- end }}
