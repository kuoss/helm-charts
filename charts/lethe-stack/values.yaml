global:
  imageRepository: ghcr.io/kuoss

testFramework:
  enabled: true
  image:
    repository: alpine/curl
    pullPolicy: Always
    tag: latest
  timeout: 300

eventrouter:
  enabled: true
  nodeSelector: {}
  tolerations: []
  resources:
    limits:
      cpu: 100m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi

fluent-bit:
  # https://github.com/fluent/helm-charts/blob/main/charts/fluent-bit/values.yaml
  testFramework:
    enabled: false
  service:
    annotations:
      prometheus.io/path: "/api/v1/metrics/prometheus"
      prometheus.io/port: "2020"
      prometheus.io/scrape: "true"
  tolerations:
    - effect: NoSchedule
      operator: Exists
  luaScripts:
    kube.lua: |
      function kube(tag, timestamp, r)
        local u = os.date("%Y-%m-%dT%H:%M:%SZ")
        local n,p,c = tag:match("^kube_([^%.]+)_([^%.]+)_([^%.]+)$")
        return 1, timestamp, {tag="pod/"..n.."/"..string.sub(u,1,10).."_"..string.sub(u,12,13)..".log", row=u.."["..n.."|"..p.."|"..c.."] "..r["log"]}
      end
    host.lua: |
      function host(tag, timestamp, r)
        local u = os.date("%Y-%m-%dT%H:%M:%SZ")
        return 1, timestamp, {tag="node/"..r["_HOSTNAME"].."/"..string.sub(u,1,10).."_"..string.sub(u,12,13)..".log", row=u.."["..r["_HOSTNAME"].."|"..r["SYSLOG_IDENTIFIER"].."] "..r["MESSAGE"]}
      end
  config:
    customParsers: |
      [PARSER]
          Name              containerd
          Format            regex
          Regex             ^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$
          Time_Key          time
          Time_Format       %Y-%m-%dT%H:%M:%S.%L%z

    inputs: |
      [INPUT]
          Name              tail
          Tag               kube_<namespace>_<pod>_<container>
          Tag_Regex         (?<pod>[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace>[^_]+)_(?<container>.+)-
          Path              /var/log/containers/*.log
          Exclude_Path      /var/log/containers/*_fluent-bit-*.log
          Parser            containerd
          Buffer_Max_Size   1MB
          Mem_Buf_Limit     5MB
          Skip_Long_Lines   On
          Refresh_Interval  5
          Read_from_Head    True

      [INPUT]
          Name              systemd
          Tag               host.*
          Systemd_Filter    _SYSTEMD_UNIT=containerd.service
          Systemd_Filter    _SYSTEMD_UNIT=etcd.service
          Systemd_Filter    _SYSTEMD_UNIT=kubelet.service
          Read_From_Tail    On

    filters: |
      [FILTER]
          Name              lua
          Match             kube_*
          script            /fluent-bit/scripts/kube.lua
          call              kube

      [FILTER]
          Name              lua
          Match             host.*
          script            /fluent-bit/scripts/host.lua
          call              host

      [FILTER]
          Name              rewrite_tag
          Match_regex       ^(kube|host)
          Rule              $tag .* $tag false
          Emitter_Name      re_emitted

      [FILTER]
          Name              modify
          Match_regex       ^(pod|node)
          Remove            tag

    outputs: |
      [OUTPUT]
          Name              forward
          Match_regex       ^(pod|node)
          Host              {{ .Release.Name }}-lethe
          Port              24224

lethe:
  nodeSelector: {}
  hostAliases: []
  dnsConfig: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []

  service:
    enabled: true
    annotations:
      prometheus.io/path: "/api/v1/metrics/prometheus"
      prometheus.io/port: "2020"
      prometheus.io/scrape: "true"
    labels: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP

  ingress:
    enabled: false
    annotations: {}
    extraLabels: {}
    hosts: []
    path: /
    pathType: Prefix
    extraPaths: []
    tls: []

  extraConfigmapLabels: {}
  persistentVolume:
    enabled: true
    accessModes:
      - ReadWriteOnce
    labels: {}
    annotations: {}
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    # storageClass: "-"

  emptyDir:
    sizeLimit: ""

  retention:
    size: 7g
    time: 15d

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 500m
    #   memory: 512Mi
