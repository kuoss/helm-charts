global:
  imageRepository: ghcr.io/kuoss

fluent-bit:
  # https://github.com/fluent/helm-charts/blob/main/charts/fluent-bit/values.yaml
  testFramework:
    enabled: false
  service:
    annotations:
      prometheus.io/path: "/api/v1/metrics/prometheus"
      prometheus.io/port: "2020"
      prometheus.io/scrape: "true"
  tolerations:
  - effect: NoSchedule
    operator: Exists
  luaScripts:
    # audit.lua: |
    #   function audit(tag, timestamp, r)
    #     local u = string.sub(r["stageTimestamp"],1,19).."Z"
    #     return 1, timestamp, {tag=string.format("audit/audit/%s_%s.log",string.sub(u,1,10),string.sub(u,12,13)),
    #     row=string.format("%s %s",u,r["log"])}
    #   end
    kube.lua: |
      function kube(tag, timestamp, r)
        local u = os.date("%Y-%m-%dT%H:%M:%SZ")
        return 1, timestamp, {tag=string.format("pod/%s/%s_%s.log",r["kubernetes"]["namespace_name"],string.sub(u,1,10),string.sub(u,12,13)),
        row=string.format("%s[%s|%s|%s] %s",u,r["kubernetes"]["namespace_name"],r["kubernetes"]["pod_name"],r["kubernetes"]["container_name"],r["message"])}
      end
    host.lua: |
      function host(tag, timestamp, r)
        local u = os.date("%Y-%m-%dT%H:%M:%SZ")
        return 1, timestamp, {tag=string.format("node/%s/%s_%s.log",r["_HOSTNAME"],string.sub(u,1,10),string.sub(u,12,13)),
        row=string.format("%s[%s|%s] %s",u,r["_HOSTNAME"],r["SYSLOG_IDENTIFIER"],r["MESSAGE"])}
      end
  config:
    inputs: |
      [INPUT]
          Name tail
          Path /var/log/containers/*.log
          Exclude_Path /var/log/containers/*_fluent-bit-*.log
          Parser cri
          Tag kube.*
          Mem_Buf_Limit 5MB
          Skip_Long_Lines On

      [INPUT]
          Name systemd
          Tag host.*
          Systemd_Filter _SYSTEMD_UNIT=kubelet.service
          Systemd_Filter _SYSTEMD_UNIT=etcd.service
          Systemd_Filter _SYSTEMD_UNIT=containerd.service
          Read_From_Tail On

    filters: |
      [FILTER]
          Name kubernetes
          Match kube.*
          Merge_Log On
          Keep_Log Off
          K8S-Logging.Parser On
          K8S-Logging.Exclude On

      [FILTER]
          Name                lua
          Match               kube.*
          script              /fluent-bit/scripts/kube.lua
          call                kube

      [FILTER]
          Name                lua
          Match               host.*
          script              /fluent-bit/scripts/host.lua
          call                host

      [FILTER]
          Name                rewrite_tag
          Match_regex         ^(kube|host)
          Rule                $tag .* $tag false
          Emitter_Name        re_emitted

      [FILTER]
          Name                modify
          Match_regex         ^(pod|node)
          Remove              tag

    outputs: |
      [OUTPUT]
          Name                forward
          Match_regex         ^(pod|node)
          Host                {{ .Release.Name }}-lethe
          Port                24224

prometheus:
  # https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml
  alertmanager:
    persistence:
      enabled: false
  prometheus-node-exporter:
    extraArgs:
    - --collector.systemd
    extraHostVolumeMounts:
    - name: systemd-socket
      mountPath: /var/run/dbus/system_bus_socket
      hostPath: /var/run/dbus/system_bus_socket
      readOnly: true
      mountPropagation: None
    nameOverride: "node-exporter"
  prometheus-pushgateway:
    enabled: false

eventrouter:
  nodeSelector: {}
  tolerations: []

lethe:
  nodeSelector: {}
  hostAliases: []
  dnsConfig: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []

  service:
    enabled: true
    annotations:
      prometheus.io/path: "/api/v1/metrics/prometheus"
      prometheus.io/port: "2020"
      prometheus.io/scrape: "true"
    labels: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP

  ingress:
    enabled: false
    annotations: {}
    extraLabels: {}
    hosts: []
    path: /
    pathType: Prefix
    extraPaths: []
    tls: []

  extraConfigmapLabels: {}
  persistentVolume:
    enabled: true
    accessModes:
      - ReadWriteOnce
    labels: {}
    annotations: {}
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    # storageClass: "-"

  emptyDir:
    sizeLimit: ""

  retention:
    size: 7g
    time: 15d

  resources:
    requests:
      cpu: 100m
      memory: 100Mi
    limits:
      cpu: 1000m
      memory: 1000Mi

venti:
  config:
    global:
      ginMode: release
      logLevel: info
    alerting:
      evaluationInterval: 5s
      globalLabels: {}
    alertRules: {}
    # kubernetes.yml: |
    #   datasourceSelector:
    #     type: prometheus
    #     system: main
    #   # https://github.com/samber/awesome-prometheus-alerts/tree/ac09fd8a2d6459355fcaf93090a3b6a32575220f/dist/rules
    #   groups:
    #   - name: Kubernetes
    #     rules:
    #       - alert: KubernetesNodeReady
    #         expr: 'kube_node_status_condition{condition="Ready",status="true"} == 0'
    #         for: 10m
    #         labels:
    #           severity: critical
    #         annotations:
    #           summary: Kubernetes Node ready (instance {{$labels.instance}})
    #           description: "Node {{$labels.node}} has been unready for a long time\n  VALUE = {{$value}}\n  LABELS = {{$labels}}"
    dashboards:
      useDefault: true
      extraDashboards: {}
      # cluster.yaml: |
      #   title: Cluster
      #   rows:
      #   - panels:
      #     - title: node
      #       type: piechart
      #       targets:
      #       - expr: sum(kube_node_status_condition{status="true"}) by (condition) > 0
      #         legend: "{{condition}}"

    datasources: []
    # - name: prometheus
    #   type: prometheus
    #   url: http://vs-prometheus-server
    # - name: lethe
    #   type: lethe
    #   url: http://vs-lethe
    discovery:
      enabled: false
    users: []
    # - username: admin
    #   hash: $2a$12$VcCDgh2NDk07JGN0rjGbM.Ad41qVR/YFJcgHp0UGns5JDymv..TOG
    #   isAdmin: true
  nodeSelector: {}
  hostAliases: []
  dnsConfig: {}
  tolerations: []
  affinity: {}
  topologySpreadConstraints: []

  service:
    enabled: true
    annotations: {}
    labels: {}
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    sessionAffinity: None
    type: ClusterIP
  ingress:
    enabled: false
    annotations: {}
    extraLabels: {}
    hosts: []
    # - venti.domain.com
    tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - venti.domain.com
    path: /
    pathType: Prefix
    extraPaths: []
